--- a/app.py
+++ b/app.py
@@ -160,18 +160,32 @@
 @app.route("/errors", methods=["GET"])
 def list_errors():
-    # this used to order_by() in Firestore and blew up without an index
-    docs = db.collection("items") \
-             .where("status","==","error") \
-             .order_by("submitted_at", direction=firestore.Query.DESCENDING) \
-             .stream()
+    # fetch all errored items (no server-side ordering)
+    docs = db.collection("items") \
+             .where("status", "==", "error") \
+             .stream()

     errors = []
     for d in docs:
         data = d.to_dict()
         errors.append({
             "id":           d.id,
             "url":          data.get("url",""),
             "title":        data.get("title","<no title>"),
-            "failed_at_fmt": data.get("submitted_at",""),
+            "failed_at":    data.get("submitted_at"),
+            # leave the formatted string until after sorting
             "error":        data.get("error","<no message>")
         })

+    # now sort in Python by failed_at timestamp (most recent first)
+    errors.sort(
+      key=lambda e: e.get("failed_at") or "",
+      reverse=True
+    )
+
+    # format the timestamp for display
+    for e in errors:
+        try:
+            dt = dateparser.isoparse(e["failed_at"])
+            e["failed_at_fmt"] = dt.strftime("%b %d %Y %H:%M")
+        except Exception:
+            e["failed_at_fmt"] = e["failed_at"] or "â€”"
+
     return render_template("errors.html", errors=errors)